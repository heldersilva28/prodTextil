@page "/shop"
@using System.Globalization
@using System.Text.Json
@using System.Text
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<link href="css/shop.css" rel="stylesheet" />

<div class="shop-container">
    <!-- Premium Header with Glass Morphism -->
    <div class="shop-header">
        <div class="container">
            <div class="d-flex align-items-center justify-content-between flex-wrap">
                <div class="brand-logo">
                    <h1>ProdTextil</h1>
                </div>

                <div class="search-container">
                    <div class="search-box">
                        <input 
                            type="text"
                            class="form-control"
                            placeholder="Pesquisar por SKU, nome ou categoria..."
                            @bind="Search"
                            @bind:event="oninput" />
                        <i class="bi bi-search search-icon"></i>
                    </div>
                </div>

                <div class="header-actions">
                    <button class="cart-toggle" @onclick="ToggleCart">
                        <i class="bi bi-bag-check fs-5"></i>
                        <span class="ms-2 d-none d-md-inline">Carrinho</span>
                        @if (CartItems.Count > 0)
                        {
                            <span class="badge-counter">@CartItems.Count</span>
                        }
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="container">
        <!-- Premium Toolbar -->
        <div class="shop-toolbar">
            <div class="results-info">
                @* <i class="bi bi-grid-3x3-gap me-2"></i> *@
                <strong>@FilteredProducts.Count()</strong> produtos encontrados
                @if (!string.IsNullOrWhiteSpace(Search))
                {
                    <span class="text-muted">para "@Search"</span>
                }
            </div>
        </div>

        <!-- Premium Product Grid -->
        <div class="product-grid">
            @foreach (var product in FilteredProducts)
            {
                <div class="product-card">
                    <div class="product-image-container">
                        <img 
                            src="@product.Image" 
                            alt="@product.Name" 
                            class="product-image"
                            onerror="this.src='images/placeholder.png';" />
                        <div class="product-badge">
                            @GetProductCategory(product.Sku)
                        </div>
                    </div>

                    <div class="product-info">
                        <div class="product-header">
                            <div class="product-sku">@product.Sku</div>
                            <h3 class="product-title">@product.Name</h3>
                        </div>

                        <div class="product-details">
                            <div class="detail-item">
                                <span class="detail-label">Poliéster</span>
                                <span class="detail-value">@product.PolyesterPercentage%</span>
                            </div>
                            <div class="detail-item">
                                <span class="detail-label">Preço Unitário s/IVA</span>
                                <div class="price-container">
                                    @{
                                        var currentQuantity = Quantities[product.Id];
                                        var discountedPrice = CalculateDiscountedPrice(product.Price, currentQuantity);
                                        var hasDiscount = discountedPrice < product.Price;
                                    }
                                    @if (hasDiscount)
                                    {
                                        <span class="detail-value price-original">€@product.Price.ToString("F2")</span>
                                        <span class="detail-value price-discounted">€@discountedPrice.ToString("F2")</span>
                                        @* <span class="discount-badge">-€@((product.Price - discountedPrice).ToString("F2"))</span> *@
                                    }
                                    else
                                    {
                                        <span class="detail-value price-value">€@product.Price.ToString("F2")</span>
                                    }
                                </div>
                            </div>
                            <div class="detail-item">
                                <span class="detail-label">Disponibilidade</span>
                                <span class="detail-value">
                                    <i class="bi bi-check-circle me-1"></i>
                                    Em Stock
                                </span>
                            </div>
                            <div class="detail-item">
                                <span class="detail-label">Entrega</span>
                                <span class="detail-value">
                                    <i class="bi bi-truck me-1"></i>
                                    1-2 semanas
                                </span>
                            </div>
                        </div>

                        <div class="product-actions">
                            <div class="quantity-control">
                                <button class="quantity-btn" type="button" @onclick="() => DecrementQuantity(product)">
                                    <i class="bi bi-dash-lg"></i>
                                </button>
                                <input 
                                    type="text" 
                                    class="quantity-input"
                                    @bind="Quantities[product.Id]" 
                                    @bind:event="oninput" 
                                    onkeypress="return /[0-9]/.test(event.key)" />
                                <button class="quantity-btn" type="button" @onclick="() => IncrementQuantity(product)">
                                    <i class="bi bi-plus-lg"></i>
                                </button>
                            </div>

                            <button 
                                class="add-to-cart-btn"
                                @onclick="() => AddToCart(product)">
                                <i class="bi bi-cart-plus-fill"></i>
                                Adicionar ao Carrinho
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Premium Cart Drawer -->
@if (CartVisible)
{
    <div class="cart-drawer @GetCartDrawerClass()">
        <div class="drawer-header">
            <div class="d-flex justify-content-between align-items-start">
                <div>
                    <h2 class="drawer-title">
                        <i class="bi bi-bag-check me-2"></i>
                        Carrinho
                    </h2>
                    <div class="drawer-subtitle">
                        @CartItems.Count item@(CartItems.Count != 1 ? "s" : "") selecionado@(CartItems.Count != 1 ? "s" : "")
                    </div>
                </div>
                <button class="btn-close" @onclick="ToggleCart">
                    <i class="bi bi-x-lg"></i>
                </button>
            </div>
        </div>

        <div class="drawer-body">
            @if (CartItems.Count == 0)
            {
                <div class="empty-state">
                    <div class="empty-state-icon">
                        <i class="bi bi-bag"></i>
                    </div>
                    <h3>Carrinho Vazio</h3>
                    <p>Adicione produtos ao seu carrinho para continuar com o pedido empresarial.</p>
                </div>
            }
            else
            {
                <div class="cart-items">
                    @foreach (var item in CartItems)
                    {
                        <div class="cart-item">
                            <img src="@item.Product.Image" alt="@item.Product.Name" class="item-image" />
                            <div class="item-details">
                                <div class="item-name">@item.Product.Name</div>
                                <div class="item-sku">
                                    <i class="bi bi-tag me-1"></i>
                                    SKU: @item.Product.Sku
                                </div>
                                <div class="item-quantity">
                                    <i class="bi bi-box me-1"></i>
                                    Quantidade: @item.Quantity un.
                                </div>
                                
                            </div>
                            <div class="item-price">
                                @{
                                    var itemDiscountedPrice = CalculateDiscountedPrice(item.Product.Price, item.Quantity);
                                    var itemHasDiscount = itemDiscountedPrice < item.Product.Price;
                                }
                                @if (itemHasDiscount)
                                {
                                    <div class="item-unit-price original">€@item.Product.Price.ToString("F2") /un.</div>
                                    <div class="item-unit-price discounted">€@itemDiscountedPrice.ToString("F2") /un.</div>
                                }
                                else
                                {
                                    <div class="item-unit-price">€@item.Product.Price.ToString("F2") /un.</div>
                                }
                                <div class="item-total-price">€@((itemDiscountedPrice * item.Quantity).ToString("F2"))</div>
                            </div>
                            <button class="remove-item" @onclick="() => RemoveFromCart(item.Product)">
                                <i class="bi bi-trash3"></i>
                            </button>
                        </div>
                    }
                </div>

                <div class="cart-summary">
                    <div class="summary-row">
                        <span class="summary-label">
                            <i class="bi bi-calculator me-1"></i>
                            Subtotal:
                        </span>
                        <span class="summary-value">€@CartSubtotal.ToString("F2")</span>
                    </div>
                    <div class="summary-row">
                        <span class="summary-label">
                            <i class="bi bi-percent me-1"></i>
                            IVA (23%):
                        </span>
                        <span class="summary-value">€@CartTax.ToString("F2")</span>
                    </div>
                    <div class="summary-row summary-total">
                        <span class="summary-label">
                            <i class="bi bi-currency-euro me-1"></i>
                            Total:
                        </span>
                        <span class="summary-value">€@CartTotal.ToString("F2")</span>
                    </div>
                    
                    <button class="create-order-btn" @onclick="CreateOrder">
                        <i class="bi bi-check-circle-fill me-2"></i>
                        Finalizar Pedido
                    </button>
                </div>
            }
        </div>
    </div>

    <div class="drawer-backdrop @GetBackdropClass()" @onclick="ToggleCart"></div>
}

@code {
    // -------------------------------------------------- MODELO/DADOS
    public record Product(int Id, string Sku, string Name, string Image, int PolyesterPercentage, decimal Price, int MinOrderQuantity);
    public class CartItem
    {
        public Product Product { get; set; }
        public int Quantity { get; set; }
    }

    private List<Product> Products { get; } = new()
    {
        new Product(1, "TS-1001", "T-Shirt Básica", "https://images.unsplash.com/photo-1521572163474-6864f9cf17ab?q=80&w=400", 65, 4.20m, 500),
        new Product(2, "HD-2001", "Hoodie Corporate", "https://shorturl.at/MTu9G", 80, 12.80m, 250),
        new Product(3, "PK-3001", "Polo Empresarial", "https://shorturl.at/Leoe0", 55, 6.75m, 400),
        new Product(4, "SW-4001", "Sweatshirt Professional", "https://shorturl.at/V1Wgt", 70, 15.50m, 300),
        new Product(5, "JK-5001", "Jacket Corporate", "https://shorturl.at/BkaxI", 90, 25.90m, 200),
        new Product(6, "TS-1002", "T-Shirt Tech Performance", "https://images.unsplash.com/photo-1503341455253-b2e723bb3dbb?q=80&w=400", 85, 8.45m, 450)
    };

    // -------------------------------------------------- ESTADO
    private Dictionary<int, int> Quantities { get; set; }
    private List<CartItem> CartItems { get; } = new();
    private string Search { get; set; } = string.Empty;
    private bool CartOpen { get; set; }
    private bool CartVisible { get; set; }
    private bool CartClosing { get; set; }

    protected override async Task OnInitializedAsync()
    {
        
        // Inicializa todas as quantidades com o MOQ de cada produto
        Quantities = Products.ToDictionary(p => p.Id, p => p.MinOrderQuantity);
        await LoadAuthToken();
    }
    private async Task LoadAuthToken()
    {
        try
        {
            var token = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "auth_token");
            if (string.IsNullOrEmpty(token))
            {
                Console.WriteLine("Token de autenticação não encontrado. Faça login novamente.");
                Navigation.NavigateTo("/login");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar o token: {ex.Message}");
        }
    }

    // -------------------------------------------------- PROPRIEDADES CALCULADAS
    private IEnumerable<Product> FilteredProducts => string.IsNullOrWhiteSpace(Search)
        ? Products
        : Products.Where(p => p.Name.Contains(Search, StringComparison.OrdinalIgnoreCase) ||
                               p.Sku.Contains(Search, StringComparison.OrdinalIgnoreCase));

    private decimal CartSubtotal => CartItems.Sum(ci => CalculateDiscountedPrice(ci.Product.Price, ci.Quantity) * ci.Quantity);
    private decimal CartTax => CartSubtotal * 0.23m;
    private decimal CartTotal => CartSubtotal + CartTax;

    // -------------------------------------------------- MÉTODOS
    private string GetProductCategory(string sku)
    {
        return sku switch
        {
            var s when s.StartsWith("TS") => "T-Shirts",
            var s when s.StartsWith("HD") => "Hoodies",
            var s when s.StartsWith("PK") => "Polos",
            var s when s.StartsWith("SW") => "Sweatshirts",
            var s when s.StartsWith("JK") => "Jackets",
            _ => "Outros"
        };
    }

    public void IncrementQuantity(Product product)
    {
        if (Quantities.ContainsKey(product.Id))
            Quantities[product.Id] += 50;
    }

    public void DecrementQuantity(Product product)
    {
        if (Quantities.ContainsKey(product.Id) && Quantities[product.Id] > product.MinOrderQuantity)
            Quantities[product.Id] = Math.Max(product.MinOrderQuantity, Quantities[product.Id] - 50);
    }

    private void ValidateQuantity(Product product)
    {
        if (Quantities.ContainsKey(product.Id))
        {
            var currentQuantity = Quantities[product.Id];
            if (currentQuantity < product.MinOrderQuantity)
            {
                Quantities[product.Id] = product.MinOrderQuantity;
            }
            else
            {
                // Ajusta para o múltiplo mais próximo do MOQ
                var remainder = currentQuantity % product.MinOrderQuantity;
                if (remainder != 0)
                {
                    Quantities[product.Id] = currentQuantity - remainder + product.MinOrderQuantity;
                }
            }
        }
    }

    private bool CanAddToCart(Product product)
    {
        var quantity = Quantities[product.Id];
        return quantity >= product.MinOrderQuantity && quantity % product.MinOrderQuantity == 0;
    }

    private async Task ToggleCart()
    {
        if (CartOpen)
        {
            // Iniciar animação de fechamento
            CartClosing = true;
            CartOpen = false;
            StateHasChanged();
            
            // Aguardar a animação completar antes de ocultar o drawer
            await Task.Delay(300); // Tempo da transição CSS
            
            CartVisible = false;
            CartClosing = false;
        }
        else
        {
            // Abrir o drawer
            CartVisible = true;
            CartClosing = false;
            StateHasChanged();
            
            // Pequeno delay para garantir que o elemento está no DOM
            await Task.Delay(10);
            
            CartOpen = true;
        }
        
        StateHasChanged();
    }

    private string GetCartDrawerClass()
    {
        if (CartClosing) return "closing";
        if (CartOpen) return "open";
        return "";
    }

    private string GetBackdropClass()
    {
        if (CartClosing) return "hiding";
        if (CartOpen) return "show";
        return "";
    }

    private void AddToCart(Product product)
    {
        if (!CanAddToCart(product))
        {
            ValidateQuantity(product);
            return;
        }

        var quantity = Quantities[product.Id];
        var existing = CartItems.FirstOrDefault(ci => ci.Product.Id == product.Id);
        
        if (existing is not null)
        {
            existing.Quantity += quantity;
        }
        else
        {
            CartItems.Add(new CartItem
            {
                Product = product,
                Quantity = quantity
            });
        }

        // Abrir o carrinho se não estiver aberto
        if (!CartOpen && !CartVisible)
        {
            _ = Task.Run(async () => await ToggleCart());
        }
    }

    private void RemoveFromCart(Product product)
    {
        var item = CartItems.FirstOrDefault(ci => ci.Product.Id == product.Id);
        if (item is not null)
            CartItems.Remove(item);
    }

    private async Task CreateOrder()
    {
        try
        {
            // Get client ID from localStorage
            var clienteIdString = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "clientId");
            if (string.IsNullOrEmpty(clienteIdString) || !int.TryParse(clienteIdString, out var clienteId))
            {
                // Handle error - client not logged in
                await JSRuntime.InvokeVoidAsync("alert", "Erro: Cliente não identificado. Faça login novamente.");
                return;
            }

            // Build order payload
            var orderData = new
            {
                clienteId = clienteId,
                dataEncomenda = DateTime.Now.ToString("yyyy-MM-dd"),
                estadoId = 1,
                valorTotal = CartTotal,
                itensEncomenda = CartItems.Select(item => new
                {
                    produto = item.Product.Sku,
                    quantidade = item.Quantity,
                    precoUnitario = CalculateDiscountedPrice(item.Product.Price, item.Quantity)
                }).ToArray()
            };

            // Send POST request
            var json = JsonSerializer.Serialize(orderData);
            var content = new StringContent(json, Encoding.UTF8, "application/json");
            
            var response = await Http.PostAsync("encomendas-clientes", content);
            
            if (response.IsSuccessStatusCode)
            {
                // Order created successfully
                CartItems.Clear();
                await ToggleCart();
                
                await JSRuntime.InvokeVoidAsync("alert", "Encomenda criada com sucesso!");
            }
            else
            {
                // Handle error response
                var errorContent = await response.Content.ReadAsStringAsync();
                await JSRuntime.InvokeVoidAsync("alert", $"Erro ao criar encomenda: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            // Handle any exceptions
            await JSRuntime.InvokeVoidAsync("alert", $"Erro inesperado: {ex.Message}");
        }
    }

    private decimal CalculateDiscountedPrice(decimal originalPrice, int quantity)
    {
        // Volume discount tiers with maximum 2€ discount
        decimal discountPercentage = quantity switch
        {
            >= 1499 => 0.20m,  // 20% discount (max 2€)
            >= 999 => 0.15m,  // 15% discount
            >= 749 => 0.12m,  // 12% discount
            >= 599 => 0.10m,  // 10% discount
            >= 499 => 0.08m,  // 8% discount
            >= 399 => 0.06m,   // 6% discount
            >= 349 => 0.04m,    // 4% discount
            >= 299 => 0.02m,   // 2% discount
            _ => 0m           // No discount
        };

        var discount = originalPrice * discountPercentage;
        
        // Cap the discount at 2€
        discount = Math.Min(discount, 2.00m);
        
        var discountedPrice = originalPrice - discount;
        
        // Ensure price doesn't go below a reasonable minimum
        return Math.Max(discountedPrice, originalPrice * 0.5m);
    }
}
