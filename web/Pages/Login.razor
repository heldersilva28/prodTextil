@page "/login"
@layout AuthLayout
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using web.Models
@using web.Services
@inject AuthService AuthService
@inject NavigationManager Navigation

<div class="login-root">
  <div class="image-pane">
    <div class="overlay-text">
      <div class="brand-logo">PT</div>
      <div class="welcome-text">Bem-vindo de volta</div>
      <div class="subtitle-text">Acede à tua conta e continua a construir o futuro do teu negócio</div>
    </div>
  </div>

  <EditForm Model="@loginModel" OnValidSubmit="HandleLogin" class="login-form">
    <DataAnnotationsValidator />

    <h1 class="form-title">Iniciar Sessão</h1>
    <p class="form-subtitle">Acede à tua conta profissional para continuares</p>

    <div class="form-group">
      <label>Email</label>
      <InputText @bind-Value="loginModel.Email" class="login-field" placeholder="exemplo@empresa.com" disabled="@isLoading" />
      <div class="field-line"></div>
      <ValidationMessage For="@(() => loginModel.Email)" class="error-label" />
    </div>

    <div class="form-group">
      <label>Password</label>
      <InputText @bind-Value="loginModel.Password" type="password" class="login-field" placeholder="A tua password" disabled="@isLoading" />
      <div class="field-line"></div>
      <ValidationMessage For="@(() => loginModel.Password)" class="error-label" />
    </div>

    <button type="submit" class="login-button" disabled="@isLoading">
      @if (isLoading)
      {
        <span class="loading-spinner"></span>
      }
      <span>@(isLoading ? "A entrar..." : "Entrar")</span>
    </button>
    
    @if (!string.IsNullOrEmpty(errorMessage))
    {
      <div class="error-label" style="margin-top: 20px; text-align: center;">@errorMessage</div>
    }

    <div style="text-align: center; margin-top: 32px;">
      <a href="/" class="forgot-link">Não tens conta? Criar conta</a>
    </div>
  </EditForm>
</div>

@code {
  private LoginModel loginModel = new LoginModel();
  private string errorMessage;
  private bool isLoading = false;

  private async Task HandleLogin()
  {
    isLoading = true;
    errorMessage = null;

    try
    {
      var dto = new web.Models.LoginRequest
      {
        Email = loginModel.Email,
        Password = loginModel.Password
      };

      var response = await AuthService.LoginAsync(dto);
      if (response.Success)
      {
        Navigation.NavigateTo("/orders");
      }
      else
      {
        errorMessage = response.Message;
      }
    }
    finally
    {
      isLoading = false;
    }
  }

  public class LoginModel
  {
    [Required(ErrorMessage = "O email é obrigatório"), EmailAddress(ErrorMessage = "Email inválido")]
    public string Email { get; set; }

    [Required(ErrorMessage = "A password é obrigatória")]
    public string Password { get; set; }
  }
}
