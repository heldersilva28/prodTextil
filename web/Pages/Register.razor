@page "/"
@layout AuthLayout
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using web.Models
@using web.Services
@inject AuthService AuthService
@inject NavigationManager Navigation

<div class="login-root">

  <!-- Formulário de registo (usa mesmas classes do login) -->
  <EditForm Model="@registerModel" OnValidSubmit="HandleRegister" class="login-form">
    <DataAnnotationsValidator />

    <div>
      <label>Nome:</label>
      <InputText @bind-Value="registerModel.FullName" class="login-field" />
      <ValidationMessage For="@(() => registerModel.FullName)" class="error-label" />
    </div>
    <div>
      <label>Email:</label>
      <InputText @bind-Value="registerModel.Email" class="login-field" />
      <ValidationMessage For="@(() => registerModel.Email)" class="error-label" />
    </div>
    <div>
      <label>Password:</label>
      <InputText @bind-Value="registerModel.Password" type="password" class="login-field" />
      <ValidationMessage For="@(() => registerModel.Password)" class="error-label" />
    </div>
    <div>
      <label>Confirmar Password:</label>
      <InputText @bind-Value="registerModel.ConfirmPassword" type="password" class="login-field" />
      <ValidationMessage For="@(() => registerModel.ConfirmPassword)" class="error-label" />
    </div>

    <div>
      <label>Telefone:</label>
      <InputNumber @bind-Value="registerModel.Telefone" class="login-field" />
      <ValidationMessage For="@(() => registerModel.Telefone)" class="error-label" />
    </div>

    <div>
      <label>Morada:</label>
      <InputText @bind-Value="registerModel.Morada" class="login-field" />
      <ValidationMessage For="@(() => registerModel.Morada)" class="error-label" />
    </div>
    <div>
      <label>Código Postal:</label>
      <InputText @bind-Value="registerModel.CodigoPostal" class="login-field" />
      <ValidationMessage For="@(() => registerModel.CodigoPostal)" class="error-label" />
    </div>

    <button type="submit" class="login-button">Registar</button>
    @if (!string.IsNullOrEmpty(errorMessage))
    {
      <div class="error-label">@errorMessage</div>
    }

    <p class="forgot-link">
      Já tens conta? <a href="/login">Fazer login</a>
    </p>
  </EditForm>

  <!-- Lado da imagem/texto, idêntico ao login -->
  <div class="image-pane">
    <div class="overlay-text">
      <div class="welcome-text">Bem-vindo!</div>
      <div class="subtitle-text">Cria a tua conta</div>
    </div>
  </div>
</div>

@code {
  private RegisterModel registerModel = new RegisterModel();
  private string errorMessage;

  private async Task HandleRegister()
  {
    errorMessage = null;

    // 1) Verifica se o código postal existe
    bool cpExiste = await AuthService.GetCodigoPostalAsync(registerModel.CodigoPostal);
    if (!cpExiste)
    {
      errorMessage = "Código postal não encontrado.";
      
      return; // sai sem tentar criar o cliente
    }

    // 2) Regista primeiro o utilizador
    var dto = new RegisterRequest
    {
      Nome             = registerModel.FullName,
      Email            = registerModel.Email,
      Password         = registerModel.Password,
      TipoUtilizadorId = 4
    };
    var response = await AuthService.RegisterAsync(dto);
    if (!response.Success)
    {
      errorMessage = response.Message;
      return;
    }

    // 3) Só depois de teres o utilizador criado, regista o cliente
    var dtoCliente = new ClientRequest
    {
      Nome         = registerModel.FullName,
      Email        = registerModel.Email,
      Telefone     = registerModel.Telefone,
      Morada       = registerModel.Morada,
      codpostalId  = registerModel.CodigoPostal
    };
    var responseCliente = await AuthService.RegisterClientAsync(dtoCliente);
    if (!responseCliente.Success)
    {
      Console.WriteLine($"Message: {responseCliente.Message}");
      Console.WriteLine($"Success: {responseCliente.Success}");
      // podes repassar a mensagem de erro do backend, se existir
      errorMessage = responseCliente.Message;
      Console.WriteLine($"Erro ao registar cliente: {errorMessage}");
      return;
    }

    // 4) Se tudo correr bem, redireciona
    Navigation.NavigateTo("/login");
  }

  public class RegisterModel
  {
    [Required(ErrorMessage = "O nome é obrigatório")]
    public string FullName { get; set; }

    [Required(ErrorMessage = "O email é obrigatório"), EmailAddress(ErrorMessage = "Email inválido")]
    public string Email { get; set; }

    [Required(ErrorMessage = "A password é obrigatória")]
    public string Password { get; set; }

    [Compare(nameof(Password), ErrorMessage = "As passwords não coincidem")]
    public string ConfirmPassword { get; set; }

    [Required(ErrorMessage = "O telefone é obrigatório")]
    [RegularExpression("^[0-9]+$", ErrorMessage = "O telefone deve conter apenas números")]
    [Range(100000000, 999999999, ErrorMessage = "O telefone deve ter exatamente 9 dígitos")]
    public int Telefone { get; set; }

    [Required(ErrorMessage = "A morada é obrigatória")]
    public string Morada { get; set; }

    [Required(ErrorMessage = "O código postal é obrigatório")]
    public string CodigoPostal { get; set; }
  }
}
