@page "/orders"
@layout MainLayout
@using System.Net.Http.Json
@using web.Models
@inject HttpClient Http

<div class="orders-dashboard-background">
    <div class="container-fluid py-4">
        <div class="d-flex align-items-center justify-content-between mb-4">
            <div>
                <h1 class="h3 mb-1 text-dark fw-bold">Minhas Encomendas</h1>
                <p class="text-muted mb-0">Acompanhe o estado das suas encomendas</p>
            </div>
            <div class="d-flex align-items-center gap-3">
                <!-- Premium Enhanced Month Filter -->
                <div class="month-filter-container">
                    <div class="filter-wrapper">
                        <div class="input-group filter-group">
                            <span class="input-group-text filter-icon-wrapper">
                                <i class="bi bi-calendar3 filter-icon"></i>
                            </span>
                            <select id="monthFilter" 
                                    class="form-select month-filter-select" 
                                    @onchange="OnMonthFilterChanged"
                                    title="Filtrar encomendas por mês"
                                    @onfocus="OnFilterFocus"
                                    @onblur="OnFilterBlur">
                                <option value="" class="filter-option-default">Todos os meses</option>
                                @foreach (var month in availableMonths)
                                {
                                    <option value="@month.Value" 
                                            selected="@(selectedMonth == month.Value)"
                                            class="filter-option">
                                        @month.Text
                                    </option>
                                }
                            </select>
                            <div class="filter-highlight"></div>
                        </div>
                    </div>
                </div>
                @if (filteredOrders?.Any() == true)
                {
                    <div class="orders-count-badge @(filteredOrders.Count > 0 ? "pulse-animation" : "")">
                        <div class="count-icon-wrapper">
                            <i class="bi bi-bag-check count-icon"></i>
                        </div>
                        <div class="count-text">
                            <span class="count-number">@filteredOrders.Count</span>
                            <span class="count-label">@(filteredOrders.Count == 1 ? "encomenda" : "encomendas")</span>
                        </div>
                    </div>
                }
            </div>
        </div>

        @if (orders == null)
        {
            <div class="d-flex justify-content-center align-items-center py-5">
                <div class="text-center">
                    <div class="spinner-border text-primary mb-3" role="status" style="width: 3rem; height: 3rem;">
                        <span class="visually-hidden">Carregando encomendas...</span>
                    </div>
                    <p class="text-muted">Carregando as suas encomendas...</p>
                </div>
            </div>
        }
        else if (!filteredOrders.Any())
        {
            <div class="row justify-content-center">
                <div class="col-md-6">
                    <div class="alert alert-light border-0 text-center py-5">
                        <div class="mb-3">
                            <i class="bi bi-bag-x fs-1 text-muted"></i>
                        </div>
                        <h5 class="mb-2">
                            @if (string.IsNullOrEmpty(selectedMonth))
                            {
                                <text>Nenhuma encomenda encontrada</text>
                            }
                            else
                            {
                                <text>Nenhuma encomenda encontrada para @GetSelectedMonthText()</text>
                            }
                        </h5>
                        <p class="text-muted mb-0">
                            @if (string.IsNullOrEmpty(selectedMonth))
                            {
                                <text>Ainda não realizou nenhuma encomenda ou não há encomendas associadas ao seu perfil.</text>
                            }
                            else
                            {
                                <text>Não há encomendas para o mês selecionado. Tente selecionar outro mês.</text>
                            }
                        </p>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="row g-4">
                @foreach (var order in filteredOrders)
                {
                    <div class="col-12 col-lg-6 col-xl-4">
                        <div class="card order-card h-100 border-0 shadow-sm" @onclick="() => OpenOrderDetails(order)" style="cursor: pointer;">
                            <div class="card-header bg-white border-bottom-0 py-3">
                                <div class="d-flex justify-content-between align-items-start">
                                    <div>
                                        <div class="text-muted small mb-1">Data da encomenda</div>
                                        <div class="fw-semibold">@order.DataEncomenda.ToString("dd/MM/yyyy")</div>
                                    </div>
                                    <span class="badge @GetStatusBadgeClass(order.EstadoNome)">@order.EstadoNome</span>
                                </div>
                            </div>
                            
                            <div class="card-body py-3">
                                <div class="mb-3">
                                    <h6 class="card-subtitle text-muted mb-2">Itens da encomenda</h6>
                                    <div class="table-responsive">
                                        <table class="table table-sm mb-0">
                                            <thead>
                                                <tr class="border-bottom">
                                                    <th class="border-0 fw-medium text-muted small">Produto</th>
                                                    <th class="border-0 fw-medium text-muted small text-center">Qtd</th>
                                                    <th class="border-0 fw-medium text-muted small text-end">Preço</th>
                                                    <th class="border-0 fw-medium text-muted small text-end">Total</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var item in order.ItensEncomenda)
                                                {
                                                    <tr>
                                                        <td class="border-0 py-2">
                                                            <div class="fw-medium">@item.Produto</div>
                                                        </td>
                                                        <td class="border-0 py-2 text-center">
                                                            <span class="badge bg-light text-dark">@item.Quantidade</span>
                                                        </td>
                                                        <td class="border-0 py-2 text-end text-muted">@item.PrecoUnitario.ToString("C")</td>
                                                        <td class="border-0 py-2 text-end fw-medium">@item.Total.ToString("C")</td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="card-footer bg-light border-top-0 py-3">
                                <div class="d-flex justify-content-between align-items-center">
                                    <span class="text-muted">Valor Total</span>
                                    <span class="h6 mb-0 text-success fw-bold">@order.ValorTotal.ToString("C")</span>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>

<!-- Order Details Modal -->
@if (selectedOrder != null)
{
    <div class="modal fade show order-modal" style="display: block;" tabindex="-1" @onclick="CloseOrderDetails">
        <div class="modal-dialog modal-lg modal-dialog-centered" @onclick:stopPropagation="true">
            <div class="modal-content order-modal-content">
                <div class="modal-header border-0 pb-0">
                    <div class="w-100">
                        <div class="d-flex justify-content-between align-items-start mb-3">
                            <div>
                                <h4 class="modal-title fw-bold text-dark mb-1">Detalhes da Encomenda</h4>
                                <p class="text-muted mb-0">Encomenda realizada em @selectedOrder.DataEncomenda.ToString("dd/MM/yyyy 'às' HH:mm")</p>
                            </div>
                        </div>
                        <div class="d-flex align-items-center gap-3">
                            <span class="badge @GetStatusBadgeClass(selectedOrder.EstadoNome) fs-6">@selectedOrder.EstadoNome</span>
                            <div class="text-muted small">
                                <i class="bi bi-calendar3 me-1"></i>
                                @selectedOrder.DataEncomenda.ToString("dd/MM/yyyy")
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="modal-body pt-3">
                    <!-- Order Summary -->
                    <div class="row mb-4">
                        <div class="col-md-6">
                            <div class="info-card">
                                <h6 class="fw-semibold text-muted mb-2">
                                    <i class="bi bi-bag me-2"></i>Resumo da Encomenda
                                </h6>
                                <div class="d-flex justify-content-between mb-2">
                                    <span>Total de itens:</span>
                                    <span class="fw-medium">@selectedOrder.ItensEncomenda.Sum(x => x.Quantidade)</span>
                                </div>
                                <div class="d-flex justify-content-between">
                                    <span>Valor total:</span>
                                    <span class="fw-bold text-success fs-5">@selectedOrder.ValorTotal.ToString("C")</span>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="info-card">
                                <h6 class="fw-semibold text-muted mb-2">
                                    <i class="bi bi-truck me-2"></i>Estado da Encomenda
                                </h6>
                                <div class="d-flex align-items-center">
                                    <div class="status-indicator @GetStatusIndicatorClass(selectedOrder.EstadoNome)"></div>
                                    <span class="fw-medium">@selectedOrder.EstadoNome</span>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Order Items -->
                    <div class="mb-4">
                        <h6 class="fw-semibold text-muted mb-3">
                            <i class="bi bi-list-ul me-2"></i>Itens da Encomenda
                        </h6>
                        <div class="table-responsive">
                            <table class="table table-borderless order-items-table">
                                <thead>
                                    <tr class="table-light">
                                        <th class="fw-semibold">Produto</th>
                                        <th class="fw-semibold text-center">Quantidade</th>
                                        <th class="fw-semibold text-end">Preço Unitário</th>
                                        <th class="fw-semibold text-end">Total</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in selectedOrder.ItensEncomenda)
                                    {
                                        <tr class="order-item-row">
                                            <td>
                                                <div class="fw-medium">@item.Produto</div>
                                            </td>
                                            <td class="text-center">
                                                <span class="quantity-badge">@item.Quantidade</span>
                                            </td>
                                            <td class="text-end text-muted">@item.PrecoUnitario.ToString("C")</td>
                                            <td class="text-end fw-medium">@item.Total.ToString("C")</td>
                                        </tr>
                                    }
                                </tbody>
                                <tfoot>
                                    <tr class="table-light border-top">
                                        <td colspan="3" class="fw-semibold text-end">Total Geral:</td>
                                        <td class="text-end fw-bold text-success fs-5">@selectedOrder.ValorTotal.ToString("C")</td>
                                    </tr>
                                </tfoot>
                            </table>
                        </div>
                    </div>
                </div>
                
                <div class="modal-footer border-0 pt-0">
                    <button type="button" class="btn btn-danger" @onclick="CloseOrderDetails">
                        <i class="bi bi-x-lg me-2"></i>Fechar
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private List<OrderDto> orders;
    private List<OrderDto> filteredOrders = new();
    private OrderDto selectedOrder;
    private string selectedMonth = "";
    private List<(string Value, string Text)> availableMonths = new();
    private bool isFilterFocused = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Substitui pela tua rota real de API
            orders = await Http.GetFromJsonAsync<List<OrderDto>>("encomendas-clientes/2/encomendas");
            InitializeMonthFilter();
            ApplyMonthFilter();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Erro ao carregar encomendas: {ex}");
            orders = new List<OrderDto>();
            filteredOrders = new List<OrderDto>();
        }
    }

    private void InitializeMonthFilter()
    {
        if (orders == null || !orders.Any()) return;

        var monthsWithOrders = orders
            .Select(o => new { o.DataEncomenda.Year, o.DataEncomenda.Month })
            .Distinct()
            .OrderByDescending(x => x.Year)
            .ThenByDescending(x => x.Month)
            .ToList();

        availableMonths = monthsWithOrders
            .Select(m => (
                Value: $"{m.Year}-{m.Month:D2}",
                Text: $"{GetMonthName(m.Month)} {m.Year}"
            ))
            .ToList();
    }

    private void ApplyMonthFilter()
    {
        if (orders == null)
        {
            filteredOrders = new List<OrderDto>();
            return;
        }

        if (string.IsNullOrEmpty(selectedMonth))
        {
            filteredOrders = orders.ToList();
        }
        else
        {
            var parts = selectedMonth.Split('-');
            if (parts.Length == 2 && int.TryParse(parts[0], out int year) && int.TryParse(parts[1], out int month))
            {
                filteredOrders = orders
                    .Where(o => o.DataEncomenda.Year == year && o.DataEncomenda.Month == month)
                    .ToList();
            }
            else
            {
                filteredOrders = orders.ToList();
            }
        }
    }

    private async Task OnMonthFilterChanged(ChangeEventArgs e)
    {
        selectedMonth = e.Value?.ToString() ?? "";
        ApplyMonthFilter();
        StateHasChanged();
    }

    private async Task ClearMonthFilter()
    {
        selectedMonth = "";
        ApplyMonthFilter();
        StateHasChanged();
    }

    private string GetMonthName(int month)
    {
        return month switch
        {
            1 => "Janeiro",
            2 => "Fevereiro",
            3 => "Março",
            4 => "Abril",
            5 => "Maio",
            6 => "Junho",
            7 => "Julho",
            8 => "Agosto",
            9 => "Setembro",
            10 => "Outubro",
            11 => "Novembro",
            12 => "Dezembro",
            _ => "Mês inválido"
        };
    }

    private string GetSelectedMonthText()
    {
        if (string.IsNullOrEmpty(selectedMonth)) return "";
        
        var parts = selectedMonth.Split('-');
        if (parts.Length == 2 && int.TryParse(parts[0], out int year) && int.TryParse(parts[1], out int month))
        {
            return $"{GetMonthName(month)} {year}";
        }
        return "";
    }

    private void OpenOrderDetails(OrderDto order)
    {
        selectedOrder = order;
        StateHasChanged();
    }

    private void CloseOrderDetails()
    {
        selectedOrder = null;
        StateHasChanged();
    }

    private void OnFilterFocus()
    {
        isFilterFocused = true;
        StateHasChanged();
    }

    private void OnFilterBlur()
    {
        isFilterFocused = false;
        StateHasChanged();
    }

    private string GetStatusBadgeClass(string status)
    {
        return status?.ToLower() switch
        {
            "pendente" or "em processamento" or "aguardando" => "order-status-badge-pending",
            "concluída" or "concluida" or "finalizada" or "entregue" => "order-status-badge-completed",
            "cancelada" or "cancelado" => "order-status-badge-cancelled",
            _ => "order-status-badge-default"
        };
    }

    private string GetStatusIndicatorClass(string status)
    {
        return status?.ToLower() switch
        {
            "pendente" or "em processamento" or "aguardando" => "status-pending",
            "concluída" or "concluida" or "finalizada" or "entregue" => "status-completed",
            "cancelada" or "cancelado" => "status-cancelled",
            _ => "status-default"
        };
    }
}

<style>
    .month-filter-container {
        position: relative;
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .filter-wrapper {
        display: flex;
        align-items: center;
        position: relative;
    }

    .filter-group {
        position: relative;
        overflow: visible;
        border-radius: 16px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.08);
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        height: 60px; /* Match orders counter height */
        border: 2px solid #dee2e6;
        background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
    }

    .filter-group:hover {
        box-shadow: 0 6px 20px rgba(0,0,0,0.12);
        transform: translateY(-1px);
        border-color: #b6d7ff;
    }

    .filter-group:focus-within {
        box-shadow: 0 8px 25px rgba(13, 110, 253, 0.25);
        transform: translateY(-2px);
        border-color: #86b7fe;
    }

    .filter-icon-wrapper {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        border: none;
        border-radius: 16px 0 0 16px;
        padding: 0 1rem;
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        width: 60px; /* Match icon wrapper in orders counter */
    }

    .filter-icon-wrapper::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(135deg, rgba(13, 110, 253, 0.1) 0%, rgba(13, 110, 253, 0.05) 100%);
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    .filter-group:focus-within .filter-icon-wrapper::before {
        opacity: 1;
    }

    .filter-icon {
        color: #6c757d;
        transition: all 0.3s ease;
        font-size: 1.1rem;
        z-index: 1;
        position: relative;
    }

    .filter-group:focus-within .filter-icon {
        color: #0d6efd;
        transform: scale(1.1);
    }

    .month-filter-select {
        min-width: 200px;
        background: transparent;
        border: none;
        border-radius: 0 16px 16px 0;
        padding: 1rem 2rem 1rem 1rem;
        font-weight: 600;
        color: #495057;
        cursor: pointer;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        position: relative;
        z-index: 2;
        height: 100%;
        font-size: 0.95rem;
        display: flex;
        align-items: center;
    }

    .month-filter-select:focus {
        outline: none;
        background: transparent;
        color: #0d6efd;
        font-weight: 700;
    }

    .month-filter-select:hover {
        background: transparent;
        color: #0d6efd;
    }

    .filter-option-default {
        font-weight: 700;
        color: #6c757d;
        background: #f8f9fa;
        padding: 0.75rem 1rem;
    }

    .filter-option {
        padding: 0.75rem 1rem;
        transition: all 0.2s ease;
        font-weight: 500;
    }

    .filter-option:hover {
        background: linear-gradient(135deg, #e3f2fd 0%, #f8f9fa 100%);
        color: #0d6efd;
        font-weight: 600;
    }

    .filter-highlight {
        position: absolute;
        bottom: 0;
        left: 0;
        height: 4px;
        width: 0;
        background: linear-gradient(90deg, #0d6efd, #6610f2);
        border-radius: 2px;
        transition: width 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        z-index: 3;
    }

    .filter-group:focus-within .filter-highlight {
        width: 100%;
    }

    .orders-count-badge {
        background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
        border: 2px solid #dee2e6;
        border-radius: 16px;
        padding: 0.75rem 1rem;
        display: flex;
        align-items: center;
        gap: 0.75rem;
        height: 60px; /* Explicit height for consistency */
        box-shadow: 0 4px 12px rgba(0,0,0,0.08);
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        position: relative;
        overflow: hidden;
    }

    .orders-count-badge::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);
        transition: left 0.5s ease;
    }

    .orders-count-badge:hover::before {
        left: 100%;
    }

    .orders-count-badge:hover {
        transform: translateY(-1px);
        box-shadow: 0 6px 20px rgba(0,0,0,0.12);
        border-color: #b6d7ff;
    }

    .count-icon-wrapper {
        width: 44px;
        height: 44px;
        background: linear-gradient(135deg, #1976d2 0%, #0d47a1 100%);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        box-shadow: 0 2px 8px rgba(25, 135, 84, 0.3);
        animation: bounce 2s infinite;
        flex-shrink: 0;
    }

    .count-icon {
        color: white;
        font-size: 1.2rem;
        font-weight: bold;
    }

    .count-text {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        justify-content: center;
    }

    .count-number {
        font-size: 1.25rem;
        font-weight: 700;
        color: #495057;
        line-height: 1.2;
    }

    .count-label {
        font-size: 0.8rem;
        color: #6c757d;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        line-height: 1;
    }

    .pulse-animation {
        animation: pulse 2s infinite;
    }

    /* Animations */
    @@keyframes pulse {
        0%, 100% {
            transform: scale(1);
        }
        50% {
            transform: scale(1.02);
        }
    }

    @@keyframes bounce {
        0%, 100% {
            transform: translateY(0);
        }
        50% {
            transform: translateY(-2px);
        }
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .filter-group {
            height: 50px;
        }

        .orders-count-badge {
            height: 50px;
            padding: 0.5rem 0.75rem;
            gap: 0.5rem;
        }

        .filter-icon-wrapper {
            width: 50px;
        }

        .month-filter-select {
            min-width: 160px;
            font-size: 0.875rem;
            padding: 0.75rem 1.5rem 0.75rem 0.75rem;
        }

        .count-icon-wrapper {
            width: 36px;
            height: 36px;
        }

        .count-icon {
            font-size: 1rem;
        }

        .count-number {
            font-size: 1.1rem;
        }

        .count-label {
            font-size: 0.75rem;
        }
    }

    /* Dark mode support */
    @@media (prefers-color-scheme: dark) {
        .filter-group {
            background: linear-gradient(135deg, #2d3748 0%, #4a5568 100%);
            border-color: #4a5568;
            box-shadow: 0 4px 12px rgba(255,255,255,0.1);
        }
        
        .month-filter-select {
            color: #e2e8f0;
        }
        
        .filter-icon-wrapper {
            background: linear-gradient(135deg, #4a5568 0%, #2d3748 100%);
        }

        .orders-count-badge {
            background: linear-gradient(135deg, #2d3748 0%, #4a5568 100%);
            border-color: #4a5568;
        }

        .count-number {
            color: #e2e8f0;
        }

        .count-label {
            color: #a0aec0;
        }
    }
</style>
